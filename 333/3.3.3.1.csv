#U,t,t_0 - величины, что ты найдешь в таблице
#q - по формуле 10 из лабника высчитал/ у нас в работе это тоже формула 10
#q_e - делим q, которая вышла чуть выше на значение элементарного зарядаб
#вообще я не использовал q_e, я взял крч наименьшее q из всех
#в дальнейшем я их помечал q1, q2, ... q14, так что ты знаешь откуда что,
#если где-то встретишь q1 и т.д. это среднее q для первого опыта
#q2 - это среднее q для второго опыта и т.д.
#крч я взял q наименьшее просто наименьшее, а оно у нас в 13 опыте оч похоже
#на элементарный заряд, тип q13 = e, это частный случай если че
#в общем случае там q = ne, где n - целое число, ну e - элементарный заряд
#потом я прост взял каждое q, поделил на наименьшее и нашёл n, которая в графике
#на оси Ox - всё собственно, в конце этого файла тот файл, что у меня на графике отражен
#в этом файле там некоторые q ср изменены, так что если увидишь, что в таблице
#q для какого-то опыта не сходится с q из того текстового файла, что здесь в конце, то
#подправь
#погрешности добавь в текст, погрешности добавь в угол наклона графика (угол наклона
#графика равен элементарному заряду ес чё q = ne -> e = q/n - думаю ты понял это)
#наш е упоминается в выводе, например



Первая тройка:
U = np.array([300, 300, 300, 300, 300])
t_0 = np.array([33.03, 29.85, 33.59, 30.49, 36.42])
t = np.array([10.33, 9.21, 9.63, 9.15, 9.62])
q = [5.673e-19, 6.673e-19, 5.915e-19, 6.603e-19, 5.587e-19]
q_e = [3.546, 4.17, 3.697, 4.127, 3.492]

Вторая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([29.02, 28.4, 31.52, 28.49, 26.55, 29.31])
t = np.array([9.29, 7.89, 7.3, 8.05, 7.71, 7.23])
q = [5.076e-19, 5.848e-19, 5.783e-19, 5.744e-19, 6.250e-19, 6.129e-19]
q_e = [3.173, 3.655, 3.614, 3.59, 3.907, 3.831]

Третья тройка:
U = np.array([400, 400, 400, 400, 400, 400, 400])
t_0 = np.array([29.91, 27.93, 25.41, 27.27, 26.8, 24.98, 23.05])
t = np.array([7.83, 8.01, 8.19, 8.53, 8.19, 7.59, 8.1])
q = [5.670e-19, 5.849e-19, 6.163e-19, 5.671e-19, 5.926e-19, 6.614e-19, 6.687e-19]
q_e = [3.544, 3.656, 3.852, 3.545, 3.704, 4.134, 4.18]

Четвертая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([19.59, 18.09, 19.26, 17.71, 17.57, 18.52])
t = np.array([3.5, 2.96, 3.12, 3.03, 2.79, 2.96])
q = [1.464e-18, 1.778e-18, 1.633e-18, 1.767e-18, 1.906e-18, 1.752e-18]
q_e = [9.151, 11.117, 10.207, 11.046, 11.918, 10.951]

Пятая тройка:
U = np.array([400, 400, 400, 400, 400, 400, 400])
t_0 = np.array([15.79, 14.52, 17.31, 15.84, 16.24, 15.87, 17.2])
t = np.array([3.34, 3.44, 3.49, 3.51, 3.29, 3.45, 3.19])
q = [1.757e-18, 1.816e-18, 1.593e-18, 1.683e-18, 1.746e-18, 1.705e-18, 1.724e-18]
q_e = [10.979, 11.35, 9.954, 10.518, 10.91, 10.654, 10.778]

Шестая тройка:
U = np.array([400, 400, 400, 400, 400, 400, 400])
t_0 = np.array([22.12, 21.68, 23, 23.44, 21.9, 22.52, 22.63])
t = np.array([9.23, 9.64, 9.58, 10.36, 11.03, 10.6, 10.61])
q = [6.283e-19, 6.194e-19, 5.933e-19, 5.533e-19, 5.606e-19, 5.626e-19, 5.600e-19]
q_e = [3.927, 3.871, 3.708, 3.458, 3.504, 3.517, 3.500]

Седьмая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([25.2, 22.73, 26.21, 27.9, 25.54, 29.97])
t = np.array([9.32, 8.66, 8.52, 9.21, 9.81, 8.8])
q = [5.635e-19, 6.437e-19, 5.846e-19, 5.262e-19, 5.373e-19, 5.168e-19]
q_e = [3.522, 4.023, 3.654, 3.289, 3.358, 3.230]

Восьмая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([22.33, 26.34, 27.74, 27.09, 23.83, 25.32])
t = np.array([9.05, 8.49, 7.81, 10.27, 8.03, 9.53])
q = [6.324e-19, 5.840e-19, 5.996e-19, 4.965e-19, 6.564e-19, 5.524e-19]
q_e = [3.952, 3.650, 3.747, 3.103, 4.102, 3.452]

Девятая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([20.92, 23.57, 19.9, 21.49, 19.6, 24.68])
t = np.array([10.41, 10.86, 10.97, 9.61, 10.76, 9.35])
q = [6.053e-19, 5.332e-19, 6.100e-19, 6.252e-19, 6.258e-19, 5.713e-19]
q_e = [3.783, 3.332, 3.813, 3.907, 3.911, 3.570]

Десятая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([28.31, 35.48, 31.7, 31.63, 29.61, 35.45])
t = np.array([6.99, 6.81, 6.45, 7.44, 6.84, 6.87])
q = [6.452e-19, 5.655e-19, 6.378e-19, 5.681e-19, 6.365e-19, 5.617e-19]
q_e = [4.032, 3.534, 3.986, 3.551, 3.978, 3.510]

Одиннадцатая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([25.42, 27.45, 21.5, 25.55, 23.17, 21.12])
t = np.array([4.13, 3.5, 3.75, 3.81, 3.74, 3.69])
q = [1.074e-18, 1.183e-18, 1.300e-18, 1.148e-18, 1.242e-18, 1.333e-18]
q_e = [6.715, 7.395, 8.124, 7.177, 7.760, 8.332]

Двенадцатая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([24.4, 25.64, 30.26, 30.04, 31.78, 25.36])
t = np.array([7.47, 7.69, 7.44, 7, 7.04, 6.69])
q = [6.812e-19, 6.424e-19, 5.858e-19, 6.185e-19, 5.923e-19, 7.219e-19]
q_e = [4.258, 4.015, 3.661, 3.866, 3.702, 4.512]

Тринадцатая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([8.33, 8.79, 8.7, 8.64, 9.03, 8.85])
t = np.array([7.6, 6.9, 7.16, 7.08, 7.6, 6.86])
q = [1.678e-19, 1.679e-19, 1.661e-19, 1.682e-19, 1.552e-19, 1.674e-19]
q_e = [1.0486, 1.0495, 1.0382, 1.0516, 0.9699, 1.0462]
#вот в 13 измерении самый жесткий подгон, тут я тупа разделил на 10,
#тут было тип e-18 везде и q_e вот эти числа что ты видишь, ток умнож на 10
Четырнадцатая тройка:
U = np.array([400, 400, 400, 400, 400, 400])
t_0 = np.array([11.5, 13, 11.36, 12.59, 12.69, 12.3])
t = np.array([4.88, 4.15, 4.37, 4.46, 4.46, 4.81])
q = [1.656e-18, 1.697e-18, 1.809e-18, 1.647e-18, 1.637e-18, 1.587e-18]
q_e = [10.352, 10.604, 11.307, 10.293, 10.231, 9.918]

